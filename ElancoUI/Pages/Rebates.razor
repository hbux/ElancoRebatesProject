@page "/rebates"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ElancoUI.Components

@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager Nav
@inject IOfferData OfferData
@inject IApiService ApiService
@inject IWebHostEnvironment Env
@inject IOfferHelper OfferHelper

@if (isAnalysingUpload == true)
{
    <Modal Message="Analysing your upload...">
        <Icon>
            <div class="loader"></div>
        </Icon>
    </Modal>
}
@if (string.IsNullOrEmpty(errorMessage) != true)
{
    <Modal Message="@errorMessage">
        <Icon>
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-file-earmark-x" viewBox="0 0 16 16">
              <path d="M6.854 7.146a.5.5 0 1 0-.708.708L7.293 9l-1.147 1.146a.5.5 0 0 0 .708.708L8 9.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 9l1.147-1.146a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146z"/>
              <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>
            </svg>
        </Icon>
        <Action>
            <a class="full-primary-btn" @onclick="(() => errorMessage = null)">Close</a>
        </Action>
    </Modal>
}

<section class="main-section">
    <div class="main-container">
        <div class="rebate-container">
            <input class="rebate-container-search" type="text" placeholder="Search for... Offer code or product" />
            <div class="card" id="upload-required">
                <label class="card-details">
                    <InputFile OnChange="@UploadFile" type="file" />
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                      <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z"/>
                      <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"/>
                    </svg>
                    <h3>Take a picture</h3>
                    <a>Take a picture of your purchased product and we'll attempt to match it with a rebate.</a>
                </label>
            </div>
            <div class="rebate-container-additional-help">
                <p>Or</p>
                <hr />
                <p>Find a rebate below</p>
            </div>
            @if (hasFilteredOffers == true)
            {
                <div class="account-save">
                    <a @onclick="ViewAllOffers">Reset offers</a>
                </div>   
            }
            <div class="available-rebates-container">
                @if (offers.Count == 0 && hasFilteredOffers == false)
                {
                    <Modal Message="Loading offers...">
                        <Icon>
                            <div class="loader"></div>
                        </Icon>
                    </Modal>
                }

                @if (offers.Count == 0 && hasFilteredOffers == true)
                {
                    <Modal Message="No matching offers found">
                        <Icon>
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                              <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                              <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                            </svg>
                        </Icon>
                        <Action>
                            <a class="full-primary-btn" @onclick="ViewAllOffers">View all Offers</a>
                        </Action>
                    </Modal>
                }

                @foreach (OfferModel offer in offers)
                {
                    <div class="card" id="rebate-selected">
                        <div class="card-details-rebate">
                            <div class="rebate-info">
                                <div class="rebate-images">
                                    @foreach (ProductModel product in offer.Products)
                                    {
                                        <img src="storage/products/@(product.ImageName).@(product.ImageType)" alt="@product.Name" />
                                    }
                                </div>
                                <div class="rebate-details">
                                    <div class="details-header">
                                        <h3>Offer Code: @offer.OfferCode</h3>
                                    </div>
                                    <div class="details-purchased">
                                        <p>Purchase between:</p>
                                        <p>@DateOnly.FromDateTime(offer.ValidPurchaseStart) - @DateOnly.FromDateTime(offer.ValidPurchaseEnd)</p>
                                    </div>
                                    <table>
                                        <tr>
                                            <th>Offer Details</th>
                                            <th>Rebate Value</th>
                                        </tr>
                                        @foreach (OfferDetails offerDetails in offer.Details)
                                        {
                                            <tr>
                                                <td>@offerDetails.Amount</td>
                                                <td>@offerDetails.Value.ToString("C")</td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            </div>
                            <div class="rebate-extra">
                                <p>@offer.AdditionalInformation</p>
                            </div>
                            <div class="rebate-select-container">
                                <div class="form-submit">
                                    <button @onclick="(() => SelectRebate(offer))">Select rebate</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private List<OfferModel> offers = new List<OfferModel>();
    private FormInteractionModel formInteraction;
    private bool isAnalysingUpload;
    private string errorMessage;
    private bool hasFilteredOffers;

    protected override async Task OnInitializedAsync()
    {
        await ViewAllOffers();
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        isAnalysingUpload = true;

        try
        {
            string trustedFileName = Path.GetRandomFileName();
            string localFilePath = Path.Combine(Env.ContentRootPath, Env.EnvironmentName, "unsafe_uploads", trustedFileName);

            using (FileStream stream = new FileStream(localFilePath, FileMode.Create))
            {
                await e.File.OpenReadStream(4_000_000).CopyToAsync(stream);
            };

            var analysedContent = await ApiService.AnalyseProductImage(localFilePath);

            offers = OfferHelper.FilterOffers(analysedContent, offers);
            hasFilteredOffers = true;

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        isAnalysingUpload = false;
    }

    private async Task SelectRebate(OfferModel rebate)
    {
        await ProtectedLocalStore.SetAsync("er-form-reb", rebate);

        Nav.NavigateTo("/");
    }

    private async Task ViewAllOffers()
    {
        offers = await OfferData.GetOffers();
        hasFilteredOffers = false;
    }
}