@page "/rebates"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@using ElancoUI.Models
@using ElancoUI.Components

@using ElancoLibrary.Services
@using ElancoLibrary.Filters
@using ElancoLibrary.Data
@using ElancoLibrary.Models.Offers
@using ElancoLibrary.Models.Products
@using ElancoLibrary.Models.Brands

<!-- Microsoft -->
@inject NavigationManager Nav
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IWebHostEnvironment Env
@inject ILogger<Rebates> Logger

<!-- ElancoLibrary -->
@inject IApiService ApiService
@inject IOfferData OfferData
@inject IOfferFilter OfferFilter

@if (isAnalysingUpload == true)
{
    <Modal Message="Analysing your upload...">
        <Icon>
            <div class="loader"></div>
        </Icon>
    </Modal>
}
@if (isLoadingOffers == true && string.IsNullOrEmpty(errorMessage) == true)
{
    <Modal Message="Loading offers...">
        <Icon>
            <div class="loader"></div>
        </Icon>
    </Modal>
}
@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <Modal Message="@errorMessage">
        <Icon>
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-file-earmark-x" viewBox="0 0 16 16">
              <path d="M6.854 7.146a.5.5 0 1 0-.708.708L7.293 9l-1.147 1.146a.5.5 0 0 0 .708.708L8 9.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 9l1.147-1.146a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146z"/>
              <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>
            </svg>
        </Icon>
        <Action>
            <a class="full-primary-btn" @onclick="(() => errorMessage = null)">Close</a>
        </Action>
    </Modal>
}

<section class="main-section">
    <div class="main-container">
        <div class="rebate-container">
            <div class="info-card">
                <div class="info-card-details">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                    </svg>
                    <a>How does our rebate process work?</a>
                </div>
            </div>
            <div class="card" id="upload-required">
                <label class="card-details">
                    <InputFile OnChange="@UploadFile" type="file" />
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                      <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z"/>
                      <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"/>
                    </svg>
                    <h3>Take a picture</h3>
                    <a>Take a picture of your purchased product and we'll attempt to match it with a rebate.</a>
                </label>
            </div>
            <div class="rebate-container-additional-help">
                <p>Or</p>
                <hr />
                <p>Find a rebate below</p>
            </div>
            <div class="available-rebates-container">
                @if (offers.Count == 0 && isLoadingOffers == false)
                {
                    <p>Sorry, no offers have been found.</p>
                }
                @foreach (OfferModel offer in offers)
                {
                    <div class="card" id="rebate-selected">
                        <div class="card-details-rebate">
                            <div class="rebate-info">
                                <div class="rebate-images">
                                    @foreach (BrandModel brand in offer.Brands)
                                    {
                                        <img src="storage/brands/@(brand.ImageName).@(brand.ImageType)" alt="@brand.BrandName" />
                                    }
                                </div>
                                <div class="rebate-details">
                                    <div class="details-header">
                                        <h3>Offer Code: @offer.OfferCode</h3>
                                    </div>
                                    <div class="details-purchased">
                                        <p>Purchase between:</p>
                                        <p>@DateOnly.FromDateTime(offer.ValidPurchaseStart) - @DateOnly.FromDateTime(offer.ValidPurchaseEnd)</p>
                                    </div>
                                    <table>
                                        <tr>
                                            <th>Offer Details</th>
                                            <th>Rebate Value</th>
                                        </tr>
                                        @foreach (OfferDetailsModel offerDetails in offer.Details)
                                        {
                                            <tr>
                                                <td>@offerDetails.Amount</td>
                                                <td>@offerDetails.Value.ToString("C")</td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            </div>
                            <div class="rebate-extra">
                                <p>@offer.AdditionalInformation</p>
                            </div>
                            <div class="rebate-select-container">
                                <div class="form-submit">
                                    <button @onclick="(() => SelectOffer(offer))">Select rebate</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private string errorMessage;
    private bool isAnalysingUpload;
    private bool isLoadingOffers;
    private FormDisplayInteractionModel formDisplayInteraction;

    private List<OfferModel> offers = new List<OfferModel>();

    protected override async Task OnInitializedAsync()
    {
        // Loading all the offers from the database
        await LoadOffers();

        Logger.LogInformation("Navigated to select a rebate at {Time}", DateTime.UtcNow);
    }

    /// <summary>
    ///     This method is triggered when the user selects a file in the user's file explorer. After triggering this method
    ///     The file selected is copied to the server's directory, then is analysed using an API and attempts to auto match an
    ///     offer based on the return API analysis content.
    /// </summary>
    /// <param name="e">When a file is selected within the user's file explorer.</param>
    /// <returns>An awaitable task.</returns>
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        // Triggers the analysing modal to be displayed
        isAnalysingUpload = true;

        try
        {
            // Followed Microsoft documentation regarding file uploads. Copies the user's file into the server's directory
            string trustedFileName = Path.GetRandomFileName();
            string localFilePath = Path.Combine(Env.EnvironmentName, "unsafe_uploads", trustedFileName);
            using (FileStream stream = new FileStream(localFilePath, FileMode.Create))
            {
                await e.File.OpenReadStream(4_000_000).CopyToAsync(stream);
            };

            Logger.LogInformation("Product image uploaded at {Time}", DateTime.UtcNow);

            // Triggers the API analysis of the copied file 
            var analysedContent = await ApiService.AnalyseProductImage(localFilePath);

            // Uses the analysed content to attempt to auto match an offer
            OfferFilter.AutoMatchOffer(analysedContent, SelectOffer);
        }
        catch (Exception ex)
        {
            // Trigger the error modal to be displayed
            errorMessage = ex.Message;

            isAnalysingUpload = false;
        }

        // Closing the analysing modal
        isAnalysingUpload = false;
    }

    /// <summary>
    ///     Saves the selected offer via local storage and automatically redirects to the homepage.
    /// </summary>
    /// <param name="offer">The offer which will be selected.</param>
    private async void SelectOffer(OfferModel offer)
    {
        // Stores the offer in local storage
        await ProtectedLocalStore.SetAsync("er-form-off", offer);

        Logger.LogInformation("Rebate ID: {Id} selected at {Time}", offer.Id, DateTime.UtcNow);

        // Redirect the user to the homepage
        Nav.NavigateTo("/");
    }

    private async Task LoadOffers()
    {
        isLoadingOffers = true;

        try
        {
            offers = await OfferData.GetOffers();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        isLoadingOffers = false;
    }
}